{
  "$schema": "https://biomejs.dev/schemas/1.9.3/schema.json",
  "vcs": {
    "enabled": false,
    "clientKind": "git",
    "useIgnoreFile": false
  },
  "files": {
    "ignoreUnknown": false,
    "ignore": [
      "package.json"
    ]
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "space",
    "ignore": [
      "biome.json"
    ]
  },
  "organizeImports": {
    "enabled": true
  },
  "css": {
    "formatter": {
      "enabled": true,
      "indentStyle": "space",
      "quoteStyle": "double"
    }
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": false,
      "a11y": {
        "noAccessKey": "warn",
        "noAriaUnsupportedElements": "warn",
        "noBlankTarget": "warn",
        "noRedundantAlt": "warn",
        "noRedundantRoles": "warn",
        "useAltText": "warn",
        "useAnchorContent": "warn",
        "useAriaActivedescendantWithTabindex": "warn",
        "useAriaPropsForRole": "warn",
        "useIframeTitle": "warn",
        "useValidAnchor": "warn",
        "useValidAriaProps": "warn",
        "useValidAriaRole": {
          "level": "warn",
          "options": {
            "allowInvalidRoles": [],
            "ignoreNonDom": true
          }
        },
        "useValidAriaValues": "warn",
        "useValidLang": "warn"
      },
      "complexity": {
        "noExtraBooleanCast": "warn",
        "noUselessConstructor": "warn",
        "noUselessLabel": "warn",
        "noUselessLoneBlockStatements": "warn",
        "noUselessRename": "warn",
        "noUselessStringConcat": "warn"
      },
      "correctness": {
        "noConstAssign": "error",
        "noEmptyCharacterClassInRegex": "warn",
        "noEmptyPattern": "warn",
        "noInvalidUseBeforeDeclaration": "warn",
        "noSelfAssign": "warn",
        "noUndeclaredVariables": "off",
        "noUnreachable": "warn",
        "noUnreachableSuper": "warn",
        "noUnusedLabels": "warn",
        "noUnusedVariables": "warn",
        "useArrayLiterals": "warn",
        "useExhaustiveDependencies": "off",
        "useHookAtTopLevel": "error",
        "useIsNan": "warn",
        "useJsxKeyInIterable": "warn",
        "useYield": "warn"
      },
      "security": {
        "noDangerouslySetInnerHtmlWithChildren": "warn",
        "noGlobalEval": "error"
      },
      "style": {
        "noCommaOperator": "warn"
      },
      "suspicious": {
        "noCatchAssign": "warn",
        "noCommentText": "warn",
        "noControlCharactersInRegex": "warn",
        "noDuplicateCase": "warn",
        "noDuplicateClassMembers": "warn",
        "noDuplicateObjectKeys": "warn",
        "noDuplicateParameters": "warn",
        "noEmptyBlockStatements": "warn",
        "noFunctionAssign": "error",
        "noGlobalAssign": "error",
        "noLabelVar": "warn",
        "noRedeclare": "error",
        "noSelfCompare": "warn",
        "noShadowRestrictedNames": "warn",
        "noSparseArray": "warn",
        "noUnsafeNegation": "warn",
        "useGetterReturn": "warn",
        "useValidTypeof": "warn"
      }
    }
  },
  "javascript": {
    "formatter": {
      "quoteStyle": "double"
    }
  },
  "overrides": [
    {
      "include": [
        "**/*.ts?(x)"
      ],
      "linter": {
        "rules": {
          "complexity": {
            "noBannedTypes": "off"
          },
          "correctness": {
            "noInvalidUseBeforeDeclaration": "off",
            "noUndeclaredVariables": "off",
            "noUnusedVariables": "error"
          },
          "style": {
            "noArguments": "off",
            "noInferrableTypes": "off",
            "noNamespace": "off",
            "noNonNullAssertion": "off",
            "noVar": "off",
            "useConst": "off"
          },
          "suspicious": {
            "noDuplicateClassMembers": "off",
            "noEmptyBlockStatements": "off",
            "noExplicitAny": "off"
          }
        }
      }
    },
    {
      "include": [
        "**/src/**/*.js?(x)",
        "**/src/**/*.tsx",
        "src/main.js?(x)",
        "src/main.tsx"
      ],
      "linter": {
        "rules": {}
      }
    }
  ]
}